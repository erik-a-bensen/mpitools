name: Update Documentation
on:
  push:
    branches: [main]
    # paths: ['**/*.py']

permissions:
  contents: write

jobs:
  update-docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
          
      - name: Install MPI
        run: |
          sudo apt-get update
          sudo apt-get install -y libopenmpi-dev openmpi-bin
          
      - name: Install dependencies
        run: |
          pip install -e .
          
      - name: Generate docs manually
        run: |
          python -c "
          import sys
          sys.path.insert(0, 'src')
          import mpitools
          import inspect
          import pkgutil
          import importlib
          
          def document_module(module, module_name):
              docs = []
              print(f'=== Documenting {module_name} ===')
              
              for name in dir(module):
                  if not name.startswith('_'):
                      obj = getattr(module, name)
                      if hasattr(obj, '__doc__') and obj.__doc__:
                          if callable(obj):
                              try:
                                  sig = str(inspect.signature(obj))
                              except (ValueError, TypeError):
                                  sig = '(...)'
                              docs.append(f'## \`{name}\`\n\n\`\`\`python\n{name}{sig}\n\`\`\`\n\n{obj.__doc__}\n')
                          elif inspect.isclass(obj):
                              # Document classes
                              docs.append(f'## \`{name}\` (class)\n\n{obj.__doc__}\n')
              return docs
          
          all_docs = []
          
          # Document main module
          main_docs = document_module(mpitools, 'mpitools')
          all_docs.extend(main_docs)
          
          # Discover and document subpackages (only those with __init__.py)
          package_path = mpitools.__path__[0] if hasattr(mpitools, '__path__') else None
          if package_path:
              for importer, modname, ispkg in pkgutil.iter_modules([package_path]):
                  if not modname.startswith('_') and ispkg:  # Only include packages (with __init__.py)
                      try:
                          submodule = importlib.import_module(f'mpitools.{modname}')
                          all_docs.append(f'\n---\n\n# {modname.title()} Module\n\n')
                          sub_docs = document_module(submodule, f'mpitools.{modname}')
                          all_docs.extend(sub_docs)
                      except ImportError as e:
                          print(f'Could not import mpitools.{modname}: {e}')
          
          with open('temp_docs.md', 'w') as f:
              f.write('\n'.join(all_docs))
          "
          
      - name: Update README with custom docs
        run: |
          sed -i '/^## API Reference/,$d' README.md
          echo "" >> README.md
          echo "## API Reference" >> README.md
          echo "" >> README.md
          cat temp_docs.md >> README.md
          rm temp_docs.md
          
      - name: Commit changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add README.md
          git diff --staged --quiet || git commit -m "Auto-update README with API docs [skip ci]"
          git push